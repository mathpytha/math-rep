# makeCacheMatrix creates a matrix object that can cache its inverse.

makeCacheMatrix <- function(x = matrix()) {

  inverse_matrix <- NULL
  set <- function(y) {
    x <<- y
    inverse_matrix <<- NULL
  }
  get <- function() x
  set_inverse <- function(inverse) inverse_matrix <<- inverse
  get_inverse <- function() inverse_matrix
  list(set = set,
       get = get,
       set_inverse = set_inverse,
       get_inverse = get_inverse)
}


# cacheSolve computes the inverse of the matrix returned by 
# makeCacheMatrix function above. If the inverse has already been calculated 
# and the matrix is same, then the cachesolve should retrieve the 
# inverse from the cache.

cacheSolve <- function(x, ...) {
  inverse_matrix <- x$get_inverse()
  if(!is.null(inverse_matrix)) {
    message("Getting cached data")
    return(inverse_matrix)
  }
  data <- x$get()
  inverse_matrix <- solve(data, ...)
  x$set_inverse(inverse_matrix)
  inverse_matrix
}
